name: nvidia2-Keepalive
on:
  schedule:
    - cron: '0 19 */3 * *'
  workflow_dispatch:
    inputs:
      website_url:
        description: '被检查网站的URL'
        required: true
        type: string
      status_code:
        description: '从网站获取的状态码'
        required: true
        type: string
      timestamp:
        description: '检查发生时的时间戳'
        required: true
        type: string

jobs:
  keepalive:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Restore latest cookies cache
      id: cache-cookies-restore
      uses: actions/cache/restore@v3
      with:
        path: nvidia_cookies.json
        key: nvidia_cookies-restore-attempt-${{ runner.os }}
        restore-keys: |
          nvidia_cookies-
    
    - name: Check if cache was found
      id: check-cache
      run: |
        if [ -f "nvidia_cookies.json" ]; then
          echo "CACHE_HIT=true" >> $GITHUB_OUTPUT
          echo "Using cached cookies file"
        else
          echo "CACHE_HIT=false" >> $GITHUB_OUTPUT
          echo "No cached cookies found"
        fi
    
    - name: Download Google Cookies
      if: steps.check-cache.outputs.CACHE_HIT != 'true'
      run: |
        curl -s -L "${{ secrets.COOK_URL }}" -o nvidia_cookies.json
        if [ -f nvidia_cookies.json ]; then
          echo "Downloaded nvidia_cookies.json successfully"
        else
          echo "Error: Failed to download nvidia_cookies.json"
          exit 1
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Restore pip cache
      id: cache-pip
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Restore Playwright cache
      id: cache-playwright
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: Create playwright.version file if not exists
      run: |
        if [ ! -f "playwright.version" ]; then
          playwright_version=$(pip show playwright 2>/dev/null | grep Version | cut -d ' ' -f 2 || echo "1.34.0")
          echo "$playwright_version" > playwright.version
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Always install playwright explicitly to ensure it's available
        pip install playwright
        
        # Install from requirements.txt if it exists
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Verify playwright is installed correctly
        python -c "import playwright; print('Playwright successfully imported')"
        
        # Only install Playwright browsers if cache doesn't exist
        if [ "${{ steps.cache-playwright.outputs.cache-hit }}" != 'true' ]; then
          echo "Installing Playwright browsers..."
          python -m playwright install firefox
        else
          echo "Using cached Playwright browsers"
        fi
      
    - name: Run Python Script
      env:
        NVPW: ${{ secrets.NVPW }}
        NVURL: ${{ secrets.NVURL2 }}
        TG: ${{ secrets.TG }}
        PYTHONPATH: $PYTHONPATH:$(pwd)
      run: |
        # Print Python environment info for debugging
        which python
        python -V
        echo "PYTHONPATH: $PYTHONPATH"
        
        # Verify modules are accessible
        python -m pip list | grep playwright
        
        # Run the script with explicit Python path
        python main7.py
        
    - name: Get current timestamp for cookie cache key
      id: timestamp_generator
      run: echo "CACHE_TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      
    - name: Save cookies cache with timestamp
      uses: actions/cache/save@v3
      with:
        path: nvidia_cookies.json
        key: nvidia_cookies-${{ steps.timestamp_generator.outputs.CACHE_TIMESTAMP }}
        
    - name: Save pip cache
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Save Playwright cache
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
    
    - name: Record execution timestamp and status (always runs)
      if: always()
      run: |
        CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
        # 判断前面的步骤是否成功，通过检查上一个主要步骤的结果
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="✓ Success"
        else
          STATUS="✗ Failed"
        fi
        echo "[$CURRENT_TIME] $STATUS" >> time.txt
        echo "Updated time.txt:"
        cat time.txt
    
    - name: Commit and push timestamp
      if: always()
      run: |
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        git add time.txt
        git commit -m "[${{ job.status }}] Update execution timestamp: $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
        git push || echo "Push failed, but recording timestamp locally"
